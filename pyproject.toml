[tool.poetry]
name = "findx"
version = "0.11.0"
include = [
  { path = "CHANGES.rst", format="sdist" },
  { path = "LICENSE.rst", format="sdist" },
  { path = "README.rst", format="sdist" },
  { path = "maintainer.rst", format="sdist" },
  { path = "noxfile.py", format="sdist" },
  { path = "poetry.lock", format="sdist" },
  { path = "requirements.txt", format="sdist" },
  { path = "findx-wrapper.py", format="sdist" },
  { path = "ffx-wrapper.py", format="sdist" },
  { path = "ffg-wrapper.py", format="sdist" },
]
description = "``findx``, an extended ``find`` command."
keywords = ["extended", "find", "file", "search"]
authors = ["Michael Henry <drmikehenry@drmikehenry.com>"]
license = "MIT"
readme = "README.rst"
repository = "https://github.com/drmikehenry/findx"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Topic :: Utilities",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    # Include this classifier to prevent accidently publishing private code to PyPI.
    #   https://pypi.org/classifiers/
    # "Private :: Do Not Upload",
]

[tool.poetry.dependencies]
# Some packages, such as scipy, constrain their upper bound of Python versions
# they support. Without also constraining the upper bound here, Poetry will not
# select those versions and will result in an old version being resolved/locked.
python = "^3.8, <3.13"

[tool.poetry.group.nox.dependencies]
nox-poetry = "*"

[tool.poetry.group.install.dependencies]
pyinstaller = "^6.3"
twine = "*"

# TODO: `twine` has a requirement for `docutils`.  For some reason, specifying
# only `twine` leads to this error:
#   `Package docutils (0.21.post1) not found`
# Explicitly choosing `0.20.0` is a work-around for this issue.
# See <https://github.com/pypa/twine/issues/1082> for additional details.
docutils = "0.20.1"

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-gitignore = "*"

[tool.poetry.group.type_check.dependencies]
mypy = "*"
# As of mypy 0.900, mypy no longer bundles the stubs for third-party libraries
# that reside in the typeshed project. Add these "types-" packages here if you
# depend on them (e.g. `types-requests`).
# See: http://mypy-lang.blogspot.com/2021/06/mypy-0900-released.html
#      https://github.com/python/typeshed/tree/main/stubs
types-toml = "*"
types-setuptools = "*"

[tool.poetry.group.lint.dependencies]
ruff = "*"

[tool.poetry.scripts]
findx = "findx:main"
ffx = "findx:ffx"
ffg = "findx:ffg"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

##############################################################################
# Source formatting

[tool.black]
line-length = 79
target-version = ["py38"]

##############################################################################
# Style checking

[tool.ruff]
line-length = 79

[tool.ruff.lint]
ignore = [
    "N811",
    "N812",
    "N813",
    "N814",
]
select = [
    "C9",
    "E",
    "F",
    "N",
    "Q",
    "W",
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.mccabe]
max-complexity = 15

##############################################################################
# Type checking

[tool.mypy]
strict = true
ignore_missing_imports = true

##############################################################################
# Coverage support

[tool.coverage.run]
branch = true
